 Kadaneâ€™s Algorithm to find the subarray with the maximum sum:

 public class KadaneAlgorithm
{
    public static int MaxSubArraySum(int[] nums)
    {
        int maxSoFar = nums[0];
        int maxEndingHere = nums[0];

        for (int i = 1; i < nums.Length; i++)
        {
            maxEndingHere = Math.Max(nums[i], maxEndingHere + nums[i]);
            maxSoFar = Math.Max(maxSoFar, maxEndingHere);
        }

        return maxSoFar;
    }

    public static void Main()
    {
        int[] nums = { -2, 1, -3, 4, -1, 2, 1, -5, 4 };
        Console.WriteLine("Maximum Subarray Sum: " + MaxSubArraySum(nums)); 
    }
}



2. Write a program to find the intersection and union of two unsorted arrays without using built-in functions.

using System;
using System.Collections.Generic;

public class ArrayIntersectionUnion
{
    public static List<int> GetIntersection(int[] arr1, int[] arr2)
    {
        HashSet<int> set1 = new HashSet<int>(arr1);
        List<int> intersection = new List<int>();

        foreach (int num in arr2)
        {
            if (set1.Contains(num))
            {
                intersection.Add(num);
                set1.Remove(num);  
            }
        }

        return intersection;
    }

    public static List<int> GetUnion(int[] arr1, int[] arr2)
    {
        HashSet<int> unionSet = new HashSet<int>();

        foreach (int num in arr1)
            unionSet.Add(num);

        foreach (int num in arr2)
            unionSet.Add(num);

        return new List<int>(unionSet);
    }

    public static void Main()
    {
        int[] arr1 = { 1, 2, 2, 1 };
        int[] arr2 = { 2, 2 };
        
        var intersection = GetIntersection(arr1, arr2);
        var union = GetUnion(arr1, arr2);

        Console.WriteLine("Intersection: " + string.Join(", ", intersection)); // Output: 2
        Console.WriteLine("Union: " + string.Join(", ", union)); 
    }
}


3. Sparse Matrix Multiplication Algorithm (using a 2D array):

using System;

public class SparseMatrixMultiplication
{
    public static int[,] MultiplySparseMatrices(int[,] A, int[,] B)
    {
        int rowsA = A.GetLength(0), colsA = A.GetLength(1);
        int rowsB = B.GetLength(0), colsB = B.GetLength(1);

        if (colsA != rowsB)
        {
            throw new InvalidOperationException("Matrix multiplication is not possible due to incompatible dimensions.");
        }

        int[,] result = new int[rowsA, colsB];

        for (int i = 0; i < rowsA; i++)
        {
            for (int j = 0; j < colsB; j++)
            {
                result[i, j] = 0;
                for (int k = 0; k < colsA; k++)
                {
                    result[i, j] += A[i, k] * B[k, j];
                }
            }
        }

        return result;
    }

    public static void PrintMatrix(int[,] matrix)
    {
        for (int i = 0; i < matrix.GetLength(0); i++)
        {
            for (int j = 0; j < matrix.GetLength(1); j++)
            {
                Console.Write(matrix[i, j] + " ");
            }
            Console.WriteLine();
        }
    }

    public static void Main()
    {
        int[,] A = { { 1, 0, 0 }, { 0, 0, 2 }, { 0, 3, 0 } };
        int[,] B = { { 1, 0, 0 }, { 0, 0, 1 }, { 0, 2, 0 } };

        int[,] result = MultiplySparseMatrices(A, B);

        Console.WriteLine("Result of Sparse Matrix Multiplication:");
        PrintMatrix(result);
    }
}


4. First Missing Positive Integer in an Unsorted Array (without sorting):

using System;

public class MissingPositive
{
    public static int FirstMissingPositive(int[] nums)
    {
        int n = nums.Length;

        for (int i = 0; i < n; i++)
        {
            while (nums[i] > 0 && nums[i] <= n && nums[nums[i] - 1] != nums[i])
            {
                // Swap nums[i] and nums[nums[i] - 1]
                int temp = nums[nums[i] - 1];
                nums[nums[i] - 1] = nums[i];
                nums[i] = temp;
            }
        }

        for (int i = 0; i < n; i++)
        {
            if (nums[i] != i + 1)
            {
                return i + 1;
            }
        }

        return n + 1;
    }

    public static void Main()
    {
        int[] nums = { 3, 4, -1, 1 };
        Console.WriteLine("First Missing Positive: " + FirstMissingPositive(nums)); // Output: 2
    }
}



5.